//
//  AddDrawingViewModel.swift
//  BuildingSurvey
//
//  Created by –í–ª–∞–¥–∞ –õ–æ–¥–æ—á–Ω–∏–∫–æ–≤–∞ on 09.02.2025.
//

import SwiftUI

class AddDrawingViewModel: ObservableObject {
    @Published var drawingName: String = ""
    @Published var selectedPDF: URL?
    @Published var showError: Bool = false
    @Published var isDocumentPickerPresented: Bool = false
    
    private let repository: GeneralRepository
    private let sendRepository: SendRepository
    
    init(generalRepository: GeneralRepository, sendRepository: SendRepository) {
            self.repository = generalRepository
            self.sendRepository = sendRepository
        }

    func saveDrawing(for project: Project, completion: @escaping () -> Void) {
        print("üöÄ [AddDrawingViewModel.saveDrawing] name='\(drawingName)', selectedPDF='\(String(describing: selectedPDF))'")
        guard !drawingName.isEmpty else {
            showError = true
            print("–ò–º—è —á–µ—Ä—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        }
        
        guard let selectedPDF = selectedPDF else {
            print("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ PDF.")
            return
        }
        
        let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let projectFolder = documentsDirectory.appendingPathComponent("Projects").appendingPathComponent(project.id.uuidString)
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        var newFileName = "\(drawingName).pdf"
        var destinationURL = projectFolder.appendingPathComponent(newFileName)
        var fileIndex = 1
        
        while FileManager.default.fileExists(atPath: destinationURL.path) {
            newFileName = "\(drawingName)_\(fileIndex).pdf"
            destinationURL = projectFolder.appendingPathComponent(newFileName)
            fileIndex += 1
        }
        
        do {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if !FileManager.default.fileExists(atPath: projectFolder.path) {
                try FileManager.default.createDirectory(at: projectFolder, withIntermediateDirectories: true)
            }
            
            // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
            try FileManager.default.copyItem(at: selectedPDF, to: destinationURL)
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            let pdfData = try Data(contentsOf: destinationURL)
            repository.addDrawing(
                for: project,
                name: newFileName,
                filePath: destinationURL.path,
                pdfData: pdfData,
                servId: nil,
                scale: nil
            )
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: \(newFileName)")
            
            let fileNameSnapshot = newFileName
            let fileURLSnapshot  = destinationURL
            let pdfDataSnapshot  = pdfData
            let projectServIdOpt  = project.servId
            
            Task {
                let drawing = Drawing(
                    id: UUID(),           // –∏–ª–∏ –ª—É—á—à–µ –≤–∑—è—Ç—å —Ç–æ—Ç –∂–µ UUID, —á—Ç–æ —Å–æ–∑–¥–∞–ª CoreData
                    name: fileNameSnapshot,
                    filePath: fileURLSnapshot.path,
                    pdfData: pdfDataSnapshot,
                    scale: nil,
                    planServId: nil,
                    projectServId: project.servId.map { Int64($0) }
                )
                let result = await sendRepository.addDrawingOnServer(
                    drawing: drawing,
                    project: project,
                    fileURL: fileURLSnapshot
                )
                print("‚¨ÖÔ∏è [AddDrawingViewModel] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: \(result)")
            }
            
            print("–°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä—Ç–µ–∂ —Å –∏–º–µ–Ω–µ–º: \(newFileName) –≤ \(destinationURL.path)")
            
            
            DispatchQueue.main.async {
                completion()
            }
        }
            catch {
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: \(error.localizedDescription)")
        }
    }

}

