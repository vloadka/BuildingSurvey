//
//  SendRepository.swift
//  BuildingSurvey
//
//  Created by –í–ª–∞–¥–∞ –õ–æ–¥–æ—á–Ω–∏–∫–æ–≤–∞ on 06.04.2025.
//

import Foundation

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–∞
enum DefaultResponse: Equatable {
    case success
    case noSuchElement
    case retry
    case internetError
}

enum RegisterResponse {
    case success
    case emailUnique
    case internetError
}

enum LoginResponse {
    case success
    case inputDataError
    case internetError
}

// –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
protocol DataStoreManager {
    func updateRefreshToken(token: String) async
}

// –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π SendRepository
struct DummyDataStoreManager: DataStoreManager {
    func updateRefreshToken(token: String) async { }
}

struct DummyCustomWorkManager: CustomWorkManager { }

// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GeneralRepository –ø—Ä–æ—Ç–æ–∫–æ–ª—É GeneralRepositoryInterface
extension GeneralRepository: GeneralRepositoryInterface { }

protocol GeneralRepositoryInterface { }
protocol CustomWorkManager { }

// –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äì –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
enum DataLoadStep {
    case projects
    // –¥—Ä—É–≥–∏–µ —à–∞–≥–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
struct GetProjectsResponse: Decodable {
    let content: [ProjectOnServer]
    let last: Bool
}

// –ú–æ–¥–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
struct ProjectOnServer: Decodable {
    let id: String
    let name: String
}

class SendRepository {
    private var jwtToken: String = ""
    private let outputDir: URL?
    
    let apiService: ApiService
    let generalRepository: GeneralRepository
    let dataStoreManager: DataStoreManager
    let customWorkManager: CustomWorkManager
    
    init(apiService: ApiService,
         generalRepository: GeneralRepository,
         dataStoreManager: DataStoreManager,
         customWorkManager: CustomWorkManager) {
        self.apiService = apiService
        self.generalRepository = generalRepository
        self.dataStoreManager = dataStoreManager
        self.customWorkManager = customWorkManager
        self.outputDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞.
    // –ï—Å–ª–∏ –∫–æ–¥ 401 ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ refresh (–∑–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞).
    private func handleResponse(_ response: HTTPURLResponse) async -> DefaultResponse {
        if (200...299).contains(response.statusCode) {
            return .success
        } else if response.statusCode == 409 {
            return .noSuchElement
        } else if response.statusCode == 401 {
            let refreshResult = await refresh()
            return (refreshResult == .success) ? .retry : refreshResult
        } else {
            return .internetError
        }
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ‚Äì —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    private func refresh() async -> DefaultResponse {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
        return .internetError
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å API
    
    func registerNewUser(user: UserForSignUp) async -> RegisterResponse {
        do {
            let (_, httpResponse) = try await apiService.registerNewUser(user: user)
            if (200...299).contains(httpResponse.statusCode) {
                return .success
            } else if httpResponse.statusCode == 409 {
                return .emailUnique
            } else {
                return .internetError
            }
        } catch {
            return .internetError
        }
    }
    
    func login(user: UserForSignIn) async -> LoginResponse {
        do {
            print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è login —á–µ—Ä–µ–∑ ApiService...")

            let (_, httpResponse) = try await apiService.login(user: user)

            print("HTTP —Å—Ç–∞—Ç—É—Å login:", httpResponse.statusCode)
            print("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", httpResponse.allHeaderFields)

            let headerFields = httpResponse.allHeaderFields as? [String: String] ?? [:]
            let cookies = HTTPCookie.cookies(withResponseHeaderFields: headerFields, for: apiService.baseURL)

            var foundJwt = false
            var foundRefresh = false
            for cookie in cookies {
                print("üîç Cookie: \(cookie.name) = \(cookie.value)")
                if cookie.name == "jwt" {
                    self.jwtToken = cookie.value
                    foundJwt = true
                } else if cookie.name == "refresh" {
                    await dataStoreManager.updateRefreshToken(token: cookie.value)
                    foundRefresh = true
                }
            }

            if !foundJwt || !foundRefresh {
                print("–ù–µ –Ω–∞–π–¥–µ–Ω jwt –∏–ª–∏ refresh-token")
                return .internetError
            }

            return (200...299).contains(httpResponse.statusCode) ? .success : .inputDataError

        } catch {
            print("–û—à–∏–±–∫–∞ login –∑–∞–ø—Ä–æ—Å–∞:", error)
            return .internetError
        }
    }

    
    func changeUserPassword(oldPassword: String, newPassword: String) async -> DefaultResponse {
        do {
            let (_, httpResponse) = try await apiService.changeUserPassword(
                token: "jwt=\(jwtToken)",
                changeUserPassword: ChangeUserPassword(oldPassword: oldPassword, newPassword: newPassword)
            )
            let result = await handleResponse(httpResponse)
            if result == .retry {
                return await changeUserPassword(oldPassword: oldPassword, newPassword: newPassword)
            } else {
                return result
            }
        } catch {
            return .internetError
        }
    }
    
    func sendAvatar(fileURL: URL) async -> DefaultResponse {
        do {
            let fileData = try Data(contentsOf: fileURL)
            let fileName = fileURL.lastPathComponent
            let (_, httpResponse) = try await apiService.sendAvatar(
                token: "jwt=\(jwtToken)",
                fileData: fileData,
                fileName: fileName
            )
            let result = await handleResponse(httpResponse)
            if result == .retry {
                return await sendAvatar(fileURL: fileURL)
            } else {
                return result
            }
        } catch {
            return .internetError
        }
    }
    
    private func createMultipartBody(fileURL: URL, mimeType: String) throws -> (data: Data, boundary: String) {
       let boundary = "Boundary-\(UUID().uuidString)"
       var body = Data()
       let fileName = fileURL.lastPathComponent
       let fileData = try Data(contentsOf: fileURL)
       
       body.append("--\(boundary)\r\n".data(using: .utf8)!)
       body.append("Content-Disposition: form-data; name=\"file\"; filename=\"\(fileName)\"\r\n".data(using: .utf8)!)
       body.append("Content-Type: \(mimeType)\r\n\r\n".data(using: .utf8)!)
       body.append(fileData)
       body.append("\r\n".data(using: .utf8)!)
       body.append("--\(boundary)--\r\n".data(using: .utf8)!)
       
       return (data: body, boundary: boundary)
   }
    
    func updateUserData(user: UserData) async -> DefaultResponse {
        do {
            let (_, httpResponse) = try await apiService.updateUserData(
                token: "jwt=\(jwtToken)",
                userData: user
            )
            let result = await handleResponse(httpResponse)
            if result == .retry {
                return await updateUserData(user: user)
            } else {
                return result
            }
        } catch {
            return .internetError
        }
    }
        
    // MARK: - –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ InspectionIdResponse –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫:
    struct InspectionIdResponse: Decodable {
        let id: String
    }
   
   // –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É: (—Å—Ç–∞—Ç—É—Å, inspectionId)
    func createEmptyProjectOnServer() async -> (DefaultResponse, String) {
        do {
            let (inspectionResponse, response) = try await apiService.createEmptyProject(token: "jwt=\(jwtToken)")
            let result = await handleResponse(response)
            if result == .retry {
                return await createEmptyProjectOnServer()
            } else {
                return (result, inspectionResponse.id)
            }
        } catch {
            return (.internetError, "")
        }
    }
   
   // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
   func addProjectNameOnServer(projectName: String, serverProjectId: String) async -> DefaultResponse {
       do {
           let projectInfo = ProjectInfo(name: projectName)
           let (_, response) = try await apiService.addNameProject(
               token: "jwt=\(jwtToken)",
               id: serverProjectId,
               projectInfo: projectInfo
           )
           let result = await handleResponse(response)
           if result == .noSuchElement { return .success }
           if result == .retry {
               return await addProjectNameOnServer(projectName: projectName, serverProjectId: serverProjectId)
           }
           return result
       } catch {
           return .internetError
       }
   }
   
   // –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º—è –∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫—É.
    func createProjectOnServer(project: Project, coverImageData: Data?) async -> DefaultResponse {
        do {
            let (emptyResult, serverProjectId) = await createEmptyProjectOnServer()
            if emptyResult != .success {
                return emptyResult
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            try await Task.sleep(nanoseconds: 150_000_000)
            
            let addNameResult = await addProjectNameOnServer(projectName: project.name, serverProjectId: serverProjectId)
            if addNameResult != .success {
                return .internetError
            }
            
            try await Task.sleep(nanoseconds: 150_000_000)
            
            if let imageData = coverImageData {
                let (_, avatarResponse) = try await apiService.addAvatarProject(
                    token: "jwt=\(jwtToken)",
                    id: serverProjectId,
                    fileData: imageData,
                    fileName: "cover.jpg"
                )
                if !(200...299).contains(avatarResponse.statusCode) {
                    return .internetError
                }
            }
            
            return .success
        } catch {
            return .internetError
        }
    }

   
   // (–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   func deleteProjectOnServer(servId: String) async -> DefaultResponse {
       do {
           let (_, response) = try await apiService.deleteProject(token: "jwt=\(jwtToken)", id: servId)
           let result = await handleResponse(response)
           if result == .noSuchElement { return .success }
           if result == .retry { return await deleteProjectOnServer(servId: servId) }
           return result
       } catch {
           return .internetError
       }
   }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π generalRepository
    func getProjects(startStep: DataLoadStep) async -> DefaultResponse {
        do {
            // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚Äì –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä: generalRepository.deleteAllProjects()
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏:
            // for project in generalRepository.allProjects { generalRepository.deleteProject(id: project.id) }
            
            var pageNum = 0
            var isLastPage = false
            var allProjects: [ProjectOnServer] = []
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Ä–∞–∑
            while !isLastPage {
                try await Task.sleep(nanoseconds: 150_000_000) // –∑–∞–¥–µ—Ä–∂–∫–∞ 150 –º—Å
                let (projectsResponse, response) = try await apiService.getProjects(
                    token: "jwt=\(jwtToken)",
                    pageNum: pageNum,
                    pageSize: 10
                )
                let result = await handleResponse(response)
                if result == DefaultResponse.retry {
                    return await getProjects(startStep: startStep)
                }
                if result != DefaultResponse.success {
                    return result
                }
                allProjects.append(contentsOf: projectsResponse.content)
                isLastPage = projectsResponse.last
                pageNum += 1
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç: –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –∞—É–¥–∏–æ
            for project in allProjects {
                try await Task.sleep(nanoseconds: 150_000_000)
                let (photoResult, photoPath) = await getProjectPhoto(for: project)
                if photoResult != DefaultResponse.success {
                    return photoResult
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
                var coverData: Data? = nil
                if !photoPath.isEmpty, let data = try? Data(contentsOf: URL(fileURLWithPath: photoPath)) {
                    coverData = data
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ ‚Äì –º–µ—Ç–æ–¥ addProject –ø—Ä–∏–Ω–∏–º–∞–µ—Ç name –∏ coverImageData
                generalRepository.addProject(name: project.name, coverImageData: coverData)
                
                try await Task.sleep(nanoseconds: 150_000_000)
                let (audioResult, audioPath) = await getAudioProject(for: project)
                if audioResult == DefaultResponse.success && !audioPath.isEmpty {
                    if let audioData = try? Data(contentsOf: URL(fileURLWithPath: audioPath)) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é saveAudio
                        generalRepository.saveAudio(forProject: Project(name: project.name, coverImageData: coverData),
                                                    audioData: audioData,
                                                    timestamp: Date(),
                                                    drawingName: "Audio")
                    }
                } else if audioResult != DefaultResponse.success {
                    return audioResult
                }
            }
            
            return DefaultResponse.success
        } catch {
            return DefaultResponse.internetError
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    func getProjectPhoto(for project: ProjectOnServer) async -> (DefaultResponse, String) {
        do {
            let (data, response) = try await apiService.getProjectPhoto(
                token: "jwt=\(jwtToken)",
                id: project.id
            )
            let result = await handleResponse(response)
            if result == .retry {
                return await getProjectPhoto(for: project)
            }
            if result != .success {
                return (result, "")
            }
            // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Disposition –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if let contentDisposition = response.allHeaderFields["Content-Disposition"] as? String,
               !contentDisposition.isEmpty {
                if let savedFilePath = saveResponseToFile(
                    responseBody: data,
                    contentDisposition: contentDisposition,
                    name: "\(UUID().uuidString)_project"
                ) {
                    return (.success, savedFilePath)
                } else {
                    return (.internetError, "")
                }
            } else {
                return (.success, "")
            }
        } catch {
            return (.internetError, "")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    func getAudioProject(for project: ProjectOnServer) async -> (DefaultResponse, String) {
        do {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–æ–µ–∫—Ç–∞
            let (data, response) = try await apiService.getAudioProject(
                token: "jwt=\(jwtToken)",
                id: project.id
            )
            let result = await handleResponse(response)
            if result == .noSuchElement {
                return (.success, "")
            }
            if result == .retry {
                return await getAudioProject(for: project)
            }
            if result != .success {
                return (result, "")
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            guard !data.isEmpty else {
                return (.internetError, "")
            }
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Disposition –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            let contentDisposition = response.allHeaderFields["Content-Disposition"] as? String
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å
            guard let savedFilePath = saveResponseToFile(
                responseBody: data,
                contentDisposition: contentDisposition,
                name: "\(UUID().uuidString)_audio"
            ) else {
                return (.internetError, "")
            }
            return (.success, savedFilePath)
        } catch {
            return (.internetError, "")
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Ç–∏ –∫ –Ω–µ–º—É
    func saveResponseToFile(responseBody: Data, contentDisposition: String?, name: String, forcedExtension: String? = nil) -> String? {
        var fileExtension: String
        if let forced = forcedExtension {
            fileExtension = forced
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ Content-Disposition
            guard let cd = contentDisposition else { return nil }
            let pattern = "filename=\"?([^\";]+)\"?"
            guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return nil }
            let nsString = cd as NSString
            let results = regex.matches(in: cd, options: [], range: NSRange(location: 0, length: nsString.length))
            guard let match = results.first, match.numberOfRanges > 1 else { return nil }
            let fileName = nsString.substring(with: match.range(at: 1))
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
            if let dotRange = fileName.range(of: ".", options: .backwards) {
                fileExtension = String(fileName[dotRange.upperBound...])
            } else {
                fileExtension = ""
            }
        }
        // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "_audio", –∏—Å–ø–æ–ª—å–∑—É–µ–º "mp4"
        if fileExtension.isEmpty {
            if name.contains("_audio") {
                fileExtension = "mp4"
            } else {
                return nil
            }
        }
        let newFileName = "\(name).\(fileExtension)"
        // outputDir ‚Äì –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SendRepository)
        guard let outputDir = outputDir else { return nil }
        let fileURL = outputDir.appendingPathComponent(newFileName)
        do {
            try responseBody.write(to: fileURL)
            return fileURL.path
        } catch {
            return nil
        }
    }
    
}
